plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

ext {
    allureVersion = '2.20.1'
    junitVersion = '5.9.2'
    selenideVersion = '6.11.2'
    lombok = '1.18.24'
}

allure {
    report {
        version.set("$allureVersion")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("$allureVersion")
            }
        }
    }
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileJava {
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:${junitVersion}",
            "com.codeborne:selenide:${selenideVersion}",
            "com.codeborne:selenide-full-screenshot:${selenideVersion}",
            "com.github.javafaker:javafaker:1.0.2",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "org.aeonbits.owner:owner:1.0.12",
            "io.rest-assured:rest-assured:5.3.0",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "com.fasterxml.jackson.core:jackson-databind:2.14.1",
            "com.github.javafaker:javafaker:1.0.2",
            "com.codeborne:selenide-appium:2.5.2",
            "io.appium:java-client:8.3.0"
    )

    testRuntimeOnly(
            "org.slf4j:slf4j-simple:2.0.5"
    )

    testCompileOnly (
            "org.projectlombok:lombok:${lombok}"
    )

    testAnnotationProcessor (
            "org.projectlombok:lombok:${lombok}"
    )
}

test {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }

    if (System.getProperty("threads") != null && !System.getProperty("threads").isEmpty()) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }
}